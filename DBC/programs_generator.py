import os
import random

def fibonacciSequence():
    retValue = "def fibonacciSequence():\n"
    retValue += "    n = int(input('Please enter an integer'))\n"
    retValue += "    if n <= 1: \n"
    retValue += "       return n \n"
    retValue += "    else:\n"
    retValue += "       return(fibonacciSequence(n-1) + fibonacciSequence(n-2)) \n"
    retValue += "    nterms = 10 \n"
    retValue += "    if nterms <= 0: \n"
    retValue += "       print('Plese enter a positive integer') \n"
    retValue += "    else: \n"
    retValue += "        print('Fibonacci sequence:') \n"
    retValue += "    for i in range(nterms): \n"
    retValue += "        print(fibonacciSequence(i))\n"
    retValue += "fibonacciSequence()"
    retValue += "\n"
    retValue += "def fibonacciSequence1():\n"
    retValue += "    n = int(input('Please enter an integer'))\n"
    retValue += "    if n <= 1: \n"
    retValue += "       return n \n"
    retValue += "    else:\n"
    retValue += "       return(fibonacciSequence(n-1) + fibonacciSequence(n-2)) \n"
    retValue += "    nterms = 10 \n"
    retValue += "    if nterms <= 0: \n"
    retValue += "       print('Plese enter a positive integer') \n"
    retValue += "    else: \n"
    retValue += "        print('Fibonacci sequence:') \n"
    retValue += "    for i in range(nterms): \n"
    retValue += "        print(fibonacciSequence(i))\n"
    retValue += "fibonacciSequence()"
    retValue += "\n"
    retValue += "def fibonacciSequence2():\n"
    retValue += "    n = int(input('Please enter an integer'))\n"
    retValue += "    if n <= 1: \n"
    retValue += "       return n \n"
    retValue += "    else:\n"
    retValue += "       return(fibonacciSequence(n-1) + fibonacciSequence(n-2)) \n"
    retValue += "    nterms = 10 \n"
    retValue += "    if nterms <= 0: \n"
    retValue += "       print('Plese enter a positive integer') \n"
    retValue += "    else: \n"
    retValue += "        print('Fibonacci sequence:') \n"
    retValue += "    for i in range(nterms): \n"
    retValue += "        print(fibonacciSequence(i))\n"
    retValue += "fibonacciSequence()"
    retValue += "\n"
    return retValue
# 
def isPrime():
    retValue = "num = 407 \n"
    retValue += "if num > 1: \n"
    retValue += "   for i in range(2,num):\n"
    retValue += "       if (num % i) == 0:\n"
    retValue += "           print(num,'is not a prime number')\n"
    retValue += "           print(i,'times',num//i,'is',num)\n"
    retValue += "           break\n"
    retValue += "   else:\n"
    retValue += "       print(num,'is a prime number')\n"
    retValue += "else:\n"
    retValue += "   print(num,'is not a prime number')\n"
    retValue += "\n"
    retValue += "num = 407 \n"
    retValue += "if num > 1: \n"
    retValue += "   for i in range(2,num):\n"
    retValue += "       if (num % i) == 0:\n"
    retValue += "           print(num,'is not a prime number')\n"
    retValue += "           print(i,'times',num//i,'is',num)\n"
    retValue += "           break\n"
    retValue += "   else:\n"
    retValue += "       print(num,'is a prime number')\n"
    retValue += "else:\n"
    retValue += "   print(num,'is not a prime number')\n"
    retValue += "\n"
    retValue += "num = 407 \n"
    retValue += "if num > 1: \n"
    retValue += "   for i in range(2,num):\n"
    retValue += "       if (num % i) == 0:\n"
    retValue += "           print(num,'is not a prime number')\n"
    retValue += "           print(i,'times',num//i,'is',num)\n"
    retValue += "           break\n"
    retValue += "   else:\n"
    retValue += "       print(num,'is a prime number')\n"
    retValue += "else:\n"
    retValue += "   print(num,'is not a prime number')\n"
    retValue += "\n"
    return retValue

def productPrices():
    retValue = "productPrices = { }\n"
    retValue += "for eachElement in range(5):\n"
    retValue += "    product = input('Please enter a product name ---> ')\n"
    retValue += "    price = float(input('Please enter the price of the product ---> '))\n"
    retValue += "    productPrices[product] = price\n"
    retValue += "print('-' * 75)   \n"
    retValue += "for key,value in productPrices.items():\n"
    retValue += "    print('The price of the', key, 'is:', value)\n"
    retValue += "print('-' * 75)\n"
    retValue += "for eachElement in range(5):\n"
    retValue += "    userInput = input('Please enter a product name that you would like to find the price of ---> ')\n"
    retValue += "    if userInput in productPrices:\n"
    retValue += "        print('The price of the product is: ', productPrices[userInput])\n"
    retValue += "    else:\n"
    retValue += "        print('The product is not in the dictionary.')\n"
    retValue += "print('-' * 75)\n"
    retValue += "deleteProduct = input('Please enter the product you want to delete from the dictionary ---> ')\n"
    retValue += "productPrices.pop(deleteProduct, 'The product does not exist in this dictionary.')\n"
    retValue += "retValue = productPrices.pop(deleteProduct, 'The product does not exist in this dictionary.')\n"
    retValue += "print('RetValue:', retValue)\n"
    retValue += "print('Dictionary after deleting product:', productPrices)\n"
    retValue += "\n"
    retValue += "productPrices = { }\n"
    retValue += "for eachElement in range(5):\n"
    retValue += "    product = input('Please enter a product name ---> ')\n"
    retValue += "    price = float(input('Please enter the price of the product ---> '))\n"
    retValue += "    productPrices[product] = price\n"
    retValue += "print('-' * 75)   \n"
    retValue += "for key,value in productPrices.items():\n"
    retValue += "    print('The price of the', key, 'is:', value)\n"
    retValue += "print('-' * 75)\n"
    retValue += "for eachElement in range(5):\n"
    retValue += "    userInput = input('Please enter a product name that you would like to find the price of ---> ')\n"
    retValue += "    if userInput in productPrices:\n"
    retValue += "        print('The price of the product is: ', productPrices[userInput])\n"
    retValue += "    else:\n"
    retValue += "        print('The product is not in the dictionary.')\n"
    retValue += "print('-' * 75)\n"
    retValue += "deleteProduct = input('Please enter the product you want to delete from the dictionary ---> ')\n"
    retValue += "productPrices.pop(deleteProduct, 'The product does not exist in this dictionary.')\n"
    retValue += "retValue = productPrices.pop(deleteProduct, 'The product does not exist in this dictionary.')\n"
    retValue += "print('RetValue:', retValue)\n"
    retValue += "print('Dictionary after deleting product:', productPrices)\n"
    retValue += "\n"
    return retValue

def repeatingString():
    retValue = "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print()\n"
    retValue += "print('String' * 5)\n"
    retValue += "\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print()\n"
    retValue += "print('String' * 5)\n"
    retValue += "\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print(' \"String\" ')\n"
    retValue += "print()\n"
    retValue += "print('String' * 5)\n"
    retValue += "\n"
    return retValue

def randomList():
    retValue = "import random\n"
    retValue += "randList = [ ]\n"
    retValue += "for num in range(20):\n"
    retValue += "    randNum = random.randint(1, 100)\n"
    retValue += "    randList.append(randNum)\n"
    retValue += "print('Original List:', randList)\n"
    retValue += "print('-' * 100)\n"
    retValue += "randList.reverse()\n"
    retValue += "print('List after being reversed:', randList)\n"
    retValue += "randList.sort()\n"
    retValue += "print('List after being sorted:', randList)\n"
    retValue += "maximum = max(randList)\n"
    retValue += "minimum = min(randList)\n"
    retValue += "print('Maximum Value:', maximum)\n"
    retValue += "print('Minimum Value:', minimum)\n"
    retValue += "\n"
    retValue += "import random\n"
    retValue += "randList = [ ]\n"
    retValue += "for num in range(20):\n"
    retValue += "    randNum = random.randint(1, 100)\n"
    retValue += "    randList.append(randNum)\n"
    retValue += "print('Original List:', randList)\n"
    retValue += "print('-' * 100)\n"
    retValue += "randList.reverse()\n"
    retValue += "print('List after being reversed:', randList)\n"
    retValue += "randList.sort()\n"
    retValue += "print('List after being sorted:', randList)\n"
    retValue += "maximum = max(randList)\n"
    retValue += "minimum = min(randList)\n"
    retValue += "print('Maximum Value:', maximum)\n"
    retValue += "print('Minimum Value:', minimum)\n"
    retValue += "\n"
    return retValue

def sortingAlgorithms():
    retValue = "import random\n"
    
    retValue += "def main():\n"
    retValue += "    print('In this program will will demonstrate the functionality of a variety of sorting algorithms!')\n"
    retValue += "    print('You will instrument the algorithms and have them print out the total number of operations that they perform to sort the data')\n"
    retValue += "    in_name = 'reverse_sorted.txt'\n"
    retValue += "    try:\n"
    retValue += "        my_data = []\n"
    retValue += "        in_file = open(in_name)\n"
    retValue += "        for line in in_file:\n"
    retValue += "            tmp = line.split()\n"
    retValue += "            my_data.append(float(tmp[0]))  \n"   
    retValue += "        to_sort = build_array(my_data)\n"   
    retValue += "        to_sort = build_array(my_data)\n"
    retValue += "        print('Before quick sorting is our data sorted: %s' % isSorted(to_sort), end='. ')\n" 
    retValue += "        quickSort(to_sort, 0, len(to_sort) - 1)\n"
    retValue += "        print('After insertion sorting our data is sorted: %s' % isSorted(to_sort))\n"   
    retValue += "    except IOError:\n"
    retValue += "        print('There was an error reading the file!')\n"
    retValue += "def build_array(my_array):\n"
    retValue += "    result = []\n"
    retValue += "    for item in my_array:\n"
    retValue += "        result.append(item)\n"
    retValue += "    return result\n"
    retValue += "def isSorted(my_array):\n"
    retValue += "    for i in range(len(my_array) - 1):\n"
    retValue += "        if (my_array[i] > my_array[i+1]):\n"
    retValue += "            return False\n"
    retValue += "    return True\n"
    retValue += "def bubbleSort(my_array):\n"
    retValue += "    numOps = 0\n"
    retValue += "    n = len(my_array)\n"
    retValue += "    numOps += 2\n"
    retValue += "    for i in range(n):\n"
    retValue += "        numOps += 3\n"
    retValue += "        swapped = False\n"
    retValue += "        for j in range(0, n-i-1):\n"
    retValue += "            numOps += 3\n"
    retValue += "            numOps += 4\n"
    retValue += "            if my_array[j] > my_array[j+1] : \n"
    retValue += "                my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n"
    retValue += "                swapped = True\n"
    retValue += "                numOps += 7\n"
    retValue += "        numOps += 1\n"
    retValue += "        if (not swapped):\n"
    retValue += "            numOps += 1\n"
    retValue += "            break\n"
    retValue += "    print('The number of operations for bubble sort is:', numOps)\n"
    retValue += "def selectionSort(my_array):\n"
    retValue += "    numOps = 0\n"
    retValue += "    for i in range(len(my_array)):\n"
    retValue += "        numOps += 3 \n"
    retValue += "        min_idx = i\n"
    retValue += "        numOps += 1\n"
    retValue += "        for j in range(i+1, len(my_array)):\n"
    retValue += "            numOps += 4\n"
    retValue += "            numOps += 3\n"
    retValue += "            if my_array[min_idx] > my_array[j]: \n"
    retValue += "                min_idx = j\n"
    retValue += "                numOps += 1\n"
    retValue += "        numOps += 4\n"
    retValue += "        my_array[i], my_array[min_idx] = my_array[min_idx], my_array[i]\n"
    retValue += "    print('The number of operations for selection sort is:', numOps)\n"
    retValue += "def insertionSort(my_array): \n"
    retValue += "    numOps = 0\n"
    retValue += "    for i in range(1, len(my_array)):\n"
    retValue += "        numOps += 3\n"
    retValue += "        key = my_array[i]\n"
    retValue += "        numOps += 2\n"
    retValue += "        j = i-1\n"
    retValue += "        numOps += 2\n"
    retValue += "        while j >= 0 and key < my_array[j] :\n"
    retValue += "            numOps += 3\n"
    retValue += "            my_array[j + 1] = my_array[j]\n"
    retValue += "            numOps += 4\n"
    retValue += "            j -= 1\n"
    retValue += "            numOps += 1\n"
    retValue += "        my_array[j + 1] = key\n"
    retValue += "        numOps += 3\n"
    retValue += "    print('The number of operations for insertion sort is:', numOps)\n"
    retValue += "def shellSort(my_array):\n"
    retValue += "    numOps = 0\n"
    retValue += "    n = len(my_array)\n"
    retValue += "    numOps += 2\n"
    retValue += "    gap = n//2\n"
    retValue += "    numOps += 2\n"
    retValue += "    while gap > 0:\n"
    retValue += "        numOps += 2\n"
    retValue += "        for i in range(gap,n):\n"
    retValue += "            numOps += 2\n"
    retValue += "            temp = my_array[i]\n"
    retValue += "            numOps += 2\n"
    retValue += "            j = i\n"
    retValue += "            numOps += 1\n"
    retValue += "            while  j >= gap and my_array[j-gap] >temp:\n"
    retValue += "                numOps += 4\n"
    retValue += "                my_array[j] = my_array[j-gap]\n"
    retValue += "                numOps += 4\n"
    retValue += "                j -= gap\n"
    retValue += "                numOps += 1\n"
    retValue += "                my_array[j] = temp\n"
    retValue += "            numOps += 2\n"
#     retValue += "        gap //= 2\n"
#     retValue += "        numOps += 2\n"
    retValue += "    print('The number of operations for shell sort is:', numOps)\n"
    retValue += "def mergeSort(my_array):\n"
    retValue += "    numOps = 0\n"
    retValue += "    numOps += 3\n"
    retValue += "    if len(my_array) >1: \n"
    retValue += "        mid = len(my_array)//2 #Finding the mid of the array\n"
    retValue += "        numOps += 3\n"
    retValue += "        L = my_array[:mid] # Dividing the array elements\n"
    retValue += "        numOps += 2\n"
    retValue += "        R = my_array[mid:] # into 2 halves\n"
    retValue += "        numOps += 2\n"
    retValue += "        mergeSort(L) # Sorting the first half\n"
    retValue += "        numOps += numOps\n"
    retValue += "        mergeSort(R) # Sorting the second half\n"
    retValue += "        numOps += numOps\n"
    retValue += "        i = j = k = 0\n"
    retValue += "        numOps += 3\n"
    retValue += "        while i < len(L) and j < len(R):\n"
    retValue += "            numOps += 3\n"
    retValue += "            numOps += 3\n"
    retValue += "            if L[i] < R[j]: \n"
    retValue += "                my_array[k] = L[i]\n"
    retValue += "                numOps += 4\n"
    retValue += "                i+=1\n"
    retValue += "            else:\n"
    retValue += "                numOps += 4\n"
    retValue += "                my_array[k] = R[j] \n"
    retValue += "                j+=1\n"
    retValue += "            k+=1\n"
    retValue += "            numOps += 1\n"
    retValue += "        while i < len(L):\n"
    retValue += "            numOps += 2\n"
    retValue += "            my_array[k] = L[i]\n"
    retValue += "            numOps += 3\n"
    retValue += "            i+=1\n"
    retValue += "            k+=1\n"
    retValue += "            numOps += 2  \n"       
    retValue += "        while j < len(R):\n"
    retValue += "            numOps += 2\n"
    retValue += "            my_array[k] = R[j]\n"
    retValue += "            numOps += 3\n"
    retValue += "            j+=1\n"
    retValue += "            k+=1\n"
    retValue += "            numOps += 2\n"
    retValue += "    print('The number of operations for merge sort is:', numOps)\n"
    retValue += "def partition(my_array,low,high):\n"
    retValue += "    numOps = 0\n"
    retValue += "    i = ( low-1 )         # index of smaller element\n"
    retValue += "    numOps += 2\n"
    retValue += "    pivot = my_array[high]     # pivot \n"
    retValue += "    numOps += 2\n"
    retValue += "    for j in range(low, high):\n"
    retValue += "        numOps += 2\n"
    retValue += "        numOps += 2\n"
    retValue += "        if   my_array[j] < pivot: \n"
    retValue += "            numOps += 1\n"
    retValue += "            i = i+1 \n"
    retValue += "            my_array[i],my_array[j] = my_array[j],my_array[i]\n"
    retValue += "            numOps += 4  \n"
    retValue += "    my_array[i+1],my_array[high] = my_array[high],my_array[i+1]\n"
    retValue += "    numOps += 6\n"
    retValue += "    numOps += 1\n"
    retValue += "    return ( i+1 ) \n"
    retValue += "def quickSort(my_array,low,high):\n"
    retValue += "    numOps = 0\n"
    retValue += "    numOps += 1\n"
    retValue += "    if low < high: \n"
    retValue += "        i = (low - 1)  # index of smaller element\n"
    retValue += "        numOps += 2\n"
    retValue += "        pivot = my_array[high]  # pivot\n"
    retValue += "        numOps += 2\n"
    retValue += "        for j in range(low, high):\n"
    retValue += "            numOps += 2\n"
    retValue += "            numOps += 2\n"
    retValue += "            if my_array[j] < pivot:\n"
    retValue += "                numOps += 1\n"
    retValue += "                i = i + 1\n"
    retValue += "                my_array[i], my_array[j] = my_array[j], my_array[i]\n"
    retValue += "                numOps += 4\n"
    retValue += "        pi = i + 1\n"
    retValue += "        my_array[i + 1], my_array[high] = my_array[high], my_array[i + 1]\n"
    retValue += "        numOps += 6\n"
    retValue += "        numOps += 1\n"
    retValue += "        quickSort(my_array, low, pi-1)\n"
    retValue += "        numOps += numOps\n"
    retValue += "        quickSort(my_array, pi+1, high)\n"
    retValue += "        numOps += numOps\n"
    retValue += "    print('The number of operations for quick sort is:', numOps)\n"
    retValue += "main()\n"
    return retValue

    
def addForLoop():
    retValue = "num = 0\n"
    retValue += "for i in range(50): \n"
    retValue += "    num += 5\n"
#     retValue += "print(num)\n"
    retValue += "\n"
    return retValue

def addIfStatement():
    retValue = "num = 0\n"
    retValue += "if num > 0:\n"
    retValue += "    print(num)\n"
    retValue += "\n"
    return retValue

def generatePrograms(fileName, directoryName, programDictionary, key):
    programNum = 0
    os.mkdir(directoryName)
    save_path = directoryName
    
    for i in range(50): 
        forLoopRandNum = random.randint(0, 5)
        ifStatementRandNum = random.randint(0, 5)
        
        file_name = fileName + str(programNum) + ".py"
        completeName = os.path.join(save_path, file_name)
        f = open(completeName,"w+")
        
        addForLoopMethod = addForLoop()
        addIfStatementMethod = addIfStatement()
        
        program = programDictionary.get(key)
        
#         for m in range(repeatProgramsNum):
#             program += program
        
        for j in range(forLoopRandNum):
            program += addForLoopMethod
        
        for k in range(ifStatementRandNum):
            program += addIfStatementMethod
        
        f.write(program)
        f.close()
        
        programNum += 1
    
def main():
    programDictionary = {1: fibonacciSequence(), 2: isPrime(), 3: productPrices(), 4: repeatingString(), 5: randomList(), 6: sortingAlgorithms()}
    os.mkdir('./python_Programs')
    
    generatePrograms("fibonacciSequence", './python_Programs/fibonacciSequence', programDictionary, 1)
    generatePrograms("isPrime", './python_Programs/isPrime', programDictionary, 2)
    generatePrograms("productPrices", './python_Programs/productPrices', programDictionary, 3)
    generatePrograms("repeatingString", './python_Programs/repeatingString', programDictionary, 4)
    generatePrograms("randomList", './python_Programs/randomList', programDictionary, 5)
    generatePrograms("sortingAlgorithms", './python_Programs/sortingAlgorithms', programDictionary, 6)

        
main()